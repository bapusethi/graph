continue
edges
edge
exit
graph.public_methods
graph.methods
graph.responds_to(:outgoing_edges)
graph.respond_to(:outgoing_edges)
graph = connections.graph(1)
connections.graph(1)
connections.graph(1).outgoing_edges( Inmemory::Node.new(1))
connections.graph(1)
exit
connections.graph(1)
exit
connections
next
adjacent_list(id, source.source_id)
exit
source_id
adjacent_list(id, source_id)
exit
connections[0].source_id
connections[0]
connections
exit
adjacent_list(id, 1) 
id
connections
exit
Connection.where(graph_id: id).select(:source_id).uniq.to_sql
Connection.where(graph_id: id).pluck(:source_id).to_sql
Connection.where(graph_id: id).pluck(:source_id).uniq.to_sql
Connection.where(graph_id: id).pluck(:source_id).uniq
Connection.where(graph_id: id).pluck(:source_id).distinct
Connection.where(graph_id: id).distinct.to_sql
Connection.where(graph_id: id).distinct
Connection.where(graph_id: id).unique
Connection.where(graph_id: id).unique(:source_id).to_sql
Connection.where(graph_id: id).distinct(:source_id).to_sql
Connection.where(graph_id: id).distinct(:source_id)
Connection.where(graph_id: id)
Connection.where(graph_id: id).distinct(:source_id).pluck(&:source_id)
Connection.where(graph_id: id).distinct(:source_id)
connections
exit
connections
exit
connections
next
adjacent_list(id, connection.source_id)
continue
next
continue
next
exit
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id)
sources =  Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).where(sou
sources =  Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id)
sources[1]
sources[0]
sources =  Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id)
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id)
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id).where(source_id: 1)
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id).count(:id)
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id).count
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id).group(:source_id)
 Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id)
exit
Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id)[0]
continue
next
exit
node
@connections
next
quit
exit
connections.graph(1)
exit
edges.to_a
connections.to
edges
nodes
next
@NodeClass
Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id)[0]
Connection.where(graph_id: id).select(:source_id, :edge_id, :destination_id)
Connection.where(graph_id: id)
next
display ActiveRecord::Connection.new('Node', 'Edge')
display
